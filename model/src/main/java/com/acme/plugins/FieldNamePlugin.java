/*
package purchase.plugins;

import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.TopLevelClass;

import java.util.ArrayList;
import java.util.List;

public class FieldNamePlugin extends PluginAdapter {

    @Override
    public boolean validate(List<String> warnings) {
        return true;
    }

    private void executeAddConstantFields(TopLevelClass topLevelClass) {
        // All fields generated representing the databse columns
        List<Field> myFields = topLevelClass.getFields();
        // Buffer the new fields in a List object...
        List<Field> myNewFields = new ArrayList<Field>();

        for (Field field : myFields) {
            // Add the fields to the myNewFields list ... adding it directly via
            // topLevelClass.addField(newfield);
            // occurs in an concurrent list modification error.
            myNewFields.add(addField(topLevelClass, field));
        }

        // Add the fields to the topLevelClass
        for (Field newfield : myNewFields) {
            topLevelClass.addField(newfield);
        }
    }

    private Field addField(TopLevelClass topLevelClass, Field field) {
        String upperCase = field.getName().toUpperCase();
        Field f = new Field();
        f.setName(upperCase);
        f.setType(FullyQualifiedJavaType.getStringInstance());
        f.setVisibility(JavaVisibility.PUBLIC);
        f.setFinal(true);
        f.setStatic(true);
//		f.setInitializationString("\"" + field.getName() + "\"");
        f.setInitializationString("\"" + upperCase + "\"");
        f.addJavaDocLine("// CONSTANT generated by MyBatorPluginAdapter.class accessing the getter/setter of the field <"
                + field.getName() + ">");

        return f;

    }

    @Override
    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        this.executeAddConstantFields(topLevelClass);
        return super.modelBaseRecordClassGenerated(topLevelClass,
                introspectedTable);
    }
}
*/
